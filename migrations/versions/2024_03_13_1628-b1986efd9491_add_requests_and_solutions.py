"""add requests and solutions

Revision ID: b1986efd9491
Revises: abb36f45a422
Create Date: 2024-03-13 16:28:39.935589

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from alembic_postgresql_enum import TableReference
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'b1986efd9491'
down_revision: Union[str, None] = 'abb36f45a422'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum('OPEN', 'MANAGER_REVIEW', 'CLOSED', name='status_enum').create(op.get_bind())
    op.create_table('request',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('title', sa.String(), nullable=True),
                    sa.Column('description', sa.String(), nullable=True),
                    sa.Column('status', postgresql.ENUM('OPEN', 'MANAGER_REVIEW', 'CLOSED', name='status_enum',
                                                        create_type=False), nullable=False),
                    sa.Column('user_id', sa.Integer(), nullable=True),
                    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_request_id'), 'request', ['id'], unique=False)
    op.create_index(op.f('ix_request_title'), 'request', ['title'], unique=False)
    op.create_table('solution',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('description', sa.String(), nullable=True),
                    sa.Column('request_id', sa.Integer(), nullable=True),
                    sa.ForeignKeyConstraint(['request_id'], ['request.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_solution_id'), 'solution', ['id'], unique=False)
    op.create_index(op.f('ix_user_id'), 'user', ['id'], unique=False)
    sa.Enum('USER', 'STAFF', 'ADMIN', name='user_role_enum').drop(op.get_bind())
    sa.Enum('USER', 'STAFF', 'ADMIN', name='userroleenum').drop(op.get_bind())
    op.sync_enum_values('public', 'role_enum', ['USER', 'STAFF', 'MANAGER', 'ADMIN'],
                        [TableReference(table_schema='public', table_name='user', column_name='role')],
                        enum_values_to_rename=[])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.sync_enum_values('public', 'role_enum', ['USER', 'STAFF', 'ADMIN'],
                        [TableReference(table_schema='public', table_name='user', column_name='role')],
                        enum_values_to_rename=[])
    sa.Enum('USER', 'STAFF', 'ADMIN', name='userroleenum').create(op.get_bind())
    sa.Enum('USER', 'STAFF', 'ADMIN', name='user_role_enum').create(op.get_bind())
    op.drop_index(op.f('ix_user_id'), table_name='user')
    op.drop_index(op.f('ix_solution_id'), table_name='solution')
    op.drop_table('solution')
    op.drop_index(op.f('ix_request_title'), table_name='request')
    op.drop_index(op.f('ix_request_id'), table_name='request')
    op.drop_table('request')
    sa.Enum('OPEN', 'MANAGER_REVIEW', 'CLOSED', name='status_enum').drop(op.get_bind())
    # ### end Alembic commands ###
